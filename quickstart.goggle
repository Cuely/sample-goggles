! Goggles are simple, self-contained text files which can be hosted on any server that responds with a simple HTTP text response.
! These files contain instructions allowing you to tell the search engine how
! you'd like your results to be ranked. You can target specific URL, title or body patterns
! and indicate how their ranking should be altered (e.g. boosted, downranked, or completely
! discarded from the results).

! A Goggle source file consists of instructions, one per line. Empty lines, or
! comments (starting with an exclamation mark: '!') are ignored.

! The simplest instruction is a plain-text pattern which can be found in URLs.
! The following would match any search result whose URL contains the pattern
! as-is:
/this/is/a/pattern

! It is also possible to use some limited "globbing" capabilities such as the
! '*' character which will match zero, one or more terms:
/this/is/*/pattern

! By default, a pattern can match anywhere in the URL, but there are specific
! characters which can be used to indicate prefix or suffix matches: we call them
! "anchors".
!
! The '|' character can be used at the beginning or end of an instruction to
! indicate anchoring. The following instruction will match a prefix of the URL:
|https://en.

! The following will match a suffix of the URL:
/some/path.html|

! Both can be used at the same time:
|https://example.com|

! Additionally, each instruction can specify a list of options, following the
! '$' character and separated by commas (','). Options can be used to more finely
! target specific search results, or to indicate how a matched result's ranking
! should be altered.

! The most basic option is 'site=', which can be used to limit a instruction to
! a specific website, based on its domain. Options can be specified on their own
! (e.g. if you want to target any page of a site) or in conjunction with a
! pattern:
$site=example.com
/blog/$site=example.com

! Another set of options can be used to indicate what you want your instruction
! to target. By default any instruction will apply to a URL, but you can
! also match other aspects of a page:
!
! algorithms$inurl
! algorithms$intitle
! algorithms$indescription
! algorithms$incontent

! Finally, you can specify an 'action', which indicates how the ranking of a
! matched result should be changed by your instruction. This is the mechanism
! through which you can customize the ranking of results to your liking. You can
! use one of three possible actions in your instructions, and by default, any
! instruction without an action will be considered as 'boost':
/r/rust/
/r/rust/$boost
/r/rust/$boost=2
/r/rust/$boost=3

! The value associated with the option indicate the 'strength' with which you
! want to alter the ranking.
!
! You can also downrank results:
/r/google/$downrank
/r/google/$downrank=2
/r/google/$downrank=3

! Or you can discard results completely:
$discard,site=idontwanttobepartoftheresults.com
/this/is/spam/$discard

! Last but not least, you can control exactly how the signals gets prioritized for
! the final ranking. We countinously add more signals used during ranking,
! but you can e.g. heavily prioritize webpages with a high centrality by specifying
@host_centrality=2048

! Or you can boost matches with a specific field with the 'field' prefix e.g
@field_title=50

! Individually, each instruction can either target a very narrow set of pages (or
! even a single page), or a wider range of them, to apply reranking to a bigger
! set of results. In combination, hundreds or more instructions can allow you to
! express complex reranking functions.

! Although the Goggles language could express instructions to search through a
! small set of websites or act as a blocklist, Goggles really shine when used to
! express boosting and downranking across many domains and pages.
